var fs = require('fs');

/**
 * View
 * @param {String} path
 * @param {Object} settings
 *  @param {Function} settings.precompiler
 *  @param {String} settings.encoding
 * @param {Function} callback
 * @constructor
**/
module.exports = function(path, settings, callback) {
	var that = {
		precompiler: settings ? settings.precompiler : null,
		compiler: settings ? settings.compiler : null,
		precompileContent: null,
		content: "",
		compile: function() {
			if (this.compiler) { 
				return this.compiler(this.content);
			} else {
				return this.content;
			}
		},
		compileWith: function(compiler) {
			return compiler(this.content);
		},
		toString: function() {
			return 'VIEW: { filename: ' + this.file.name + ', path: '+ this.file.path +' }';
		}
	};
	// OPEN file
    var fd = fs.openSync(path, 'r'), // open file
		stat = fs.fstatSync(fd),
		buffer = new Buffer(stat.size),
		pathSplitted = path.split('/');
	// file information
    that.file = {
		size: stat.size,
		name: pathSplitted[pathSplitted.length-1],
		path: null,
		encoding: settings ? (settings.encoding || "utf-8") : "utf-8"
	};
    pathSplitted.pop();
    that.file.path = pathSplitted.join('/');
	
	// READ file
    if (stat.size != 0) {
        var bytesRead = fs.readSync(fd, buffer, 0, buffer.length, null);
        // GET file content
        this.content = buffer.toString(that.file.encoding, 0, buffer.length);
        
        if (settings && settings.precompiler) { // if a precompiler is given, precompile !
            that.precompileContent = that.precompiler(that.content);
        }
    }
	// CLOSE file
	fs.close(fd);
	
	return that;
};
