var fs = require('fs');

/**
 * View
 * @param {String} path
 * @param {Object} settings
 *  @param {Function} settings.precompiler
 *  @param {String} settings.encoding
 * @param {Function} callback
 * @constructor
**/
var View = function(path, settings, callback) {
    var that = this;
    this.file = {
        name: null,
        size: 0,
        encoding: null
    };
    this.content = '';
    if (settings) {
        this.file.encoding = settings.encoding || 'utf-8';
        this.precompiler = settings.precompiler;
        this.compiler = settings.compiler;
    }
    // OPEN file
    var fd = fs.openSync(path, 'r'); // open file
    var stat = fs.fstatSync(fd);
    var buffer = new Buffer(stat.size);
    this.file.size = stat.size;
    var pathSplitted = path.split('/');
    this.file.name = pathSplitted[pathSplitted.length-1];
    pathSplitted.pop();
    this.file.path = pathSplitted.join('/');
    // READ file
    if (stat.size != 0) {
        var bytesRead = fs.readSync(fd, buffer, 0, buffer.length, null);
        // GET file content
        this.content = buffer.toString(that.file.encoding, 0, buffer.length);
        
        if (settings && settings.precompiler) { // if a precompiler is given, precompile !
            that.precompileContent = that.precompiler(that.content);
        }
    }
    // CLOSE file
    fs.close(fd);
};

View.prototype = {
  content: null,
  precompileContent: null,
  precompiler: null,
  compiler: null,
  file: {
    name: null,
    path: null,
    size: 0
  },
  compile: function() {
    if (this.compiler) { 
        return this.compiler(this.content);
    } else {
        return this.content;
    }
  },
  compileWith: function(compiler) {
    return compiler(this.content);
  },
  toString: function() {
    return 'VIEW: { filename: ' + this.file.name + ', path: '+ this.file.path +' }';
  }
};

exports.view = View;
